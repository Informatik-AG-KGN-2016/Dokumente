import simple_socket, threading, sys, json, time, encrypt
mutex = threading.Lock()

def time_conv(timeinsec):
    """konvertiert die Zeit von Sekunden seit 'dem Jahr' in Uhrzeit
    """
    realtime = time.localtime(timinsec)
    minute = realtime[4]
    hour = realtime[3]
    print(hour, minute, sep=":", end=" ")
    return

def server_address():
    """returns the server address from the user input
    or returns the standart address
    """
    print("Geben Sie die Serveradresse ein, oder tippen sie 's' für Standartadresse")
    serveradr = input()
    if serveradr == "s" or serveradr == "S":
        serveradr = "127.0.0.1"
    return serveradr

def server_port():
    """returns the server port from the user input
    or returns the standart port"""
    print("Geben sie den Port ein, den sie verwenden möchten, oder tippen sie 's' für Standartadresse")
    portadr = input()
    if portadr == "s" or portadr == "S":
        portadr = 8888
    else:
        if len(portadr) != 4:
            print("Ungültige Eingabe!")
            server_port()
    return portadr


def socket_starter(serveradr, serverport):
    """starts a server with the simple_sockets module
    """
    new_socket = simple_socket.connect_as_client(server_address=serveradr, server_port=serverport)
    return new_socket

def send():
    """sends a message and converts it into json style
    """
    global new_socket
    global username
    login = {
  "nachrichten_id": 2,
  "aktion": "login",
  "sender_name": username,
  "zeitstempel": time.time(),
  "protokoll_version": "0.2"
    }
    new_socket.send(login)               
    encryptor = 26
    while True:
        for line in sys.stdin:
            if line == "#disconnect*":
                logout = {
  "nachrichten_id": 2,
  "aktion": "logout",
  "sender_name": username,
  "zeitstempel": time.time(),
  "protokoll_version": "0.2"
    }
                my_socket.send(logout)
                my_socket.close()
                break
            else:
                line = encrypt.encrypt_normal(line, encryptor)
                message = {
  "nachrichten_id": 1,
  "text": line,
  "text_länge": len(line),
  "verschlüsselung": 
  {
    "algorithmus": "caesar",
    "parameter": [encryptor],
    "verschlüsselte parameter": []
  },
  "sender_name": "Lukas Baier",
  "zeitstempel": time.time(),
  "protokoll_verion": "0.2"
}
                json_protocole = json.dumps(message)
                new_socket.send(json_protocole)
    return

def get_message(serveraddress):
    """tries to recieve theoretically incoming messages
    """
    global new_socket
    while True:
        json_message = new_socket.receive()
        json_message = json.loads(json_message)
        if json.message["nachrichten_id"] == 1:
            message = json_message["text"]
            message = encrypt.decrypt_normal(message, json_message["verschlüsselung"]["parameter"])
            time_conv(json_message["zeitstempel"])
            print(json_message["sender_name"],message, sep=":")
            time.sleep(1)
        elif json.message["nachrichten_id"] == 2:
            if json_message["aktion"] == "login":
                time_conv((json_message["zeitstempel"]))
                print(json_message["sender_name"], "just logged in")
            else:
                time_conv((json_message["zeitstempel"]))
                print(json_message["sender_name"], "just logged out")
    return

def main():
    global new_socket
    global username
    serveradr = server_address()
    serverport = server_port()
    username = input("Geben sie einen Benutzernamen ein: ")
    new_socket = socket_starter(serveradr, serverport)
    # Hauptthreads werden gestartet 
    thread1 = threading.Thread(target=send)
    thread1.start()
    #thread2 = threading.Thread(target=get_message, args=(serveradr,))
    #thread2.start()
                           
main()
